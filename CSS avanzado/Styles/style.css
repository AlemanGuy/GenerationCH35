:root {
    /* 
    Enfoque de diseño basado en sistemas para establecer reglas y patrones escalables y reutilizables.
    Se personalizan variables para acceder a cualquier valor de una propiedad mediante la pseudoclase ":root" con la sintaxis --nombre-variable 
    */
    --font-primary: 'Poppins', sans-serif;
    --color-primary: #A60311;
    --color-secondary: #D9042B;
    --color-text-primary: #D9CCB4;
    --color-text-secondary: #D98E04;
    --color-background: #590219;
    --color-light: #F2F2F2;
    --color-dark: #070C26;
}

body{
    background-color: var(--color-background);
    color: var(--color-light);
    font-family: var(--font-primary);

}

.position{
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
}

/* No permite movimeinto, se queda solo en su espacio original.*/

#Static{
    position: static;
    background-color: var(--color-text-secondary);

}
    /* Es posicionado de forma relativa al elemento anteiror o posicion original y si permite movimiento mediante propiedades top, bottom, left, right */

#Relative{
    position: relative;
    left: auto;
    top: 1000px;
    right: 10px;
    margin: 1rem;
    background-color: var(--color-primary);

}

    /* Es posicionado de forma al ancenstro o objeto anterior a el*/

#Absolute{
    position: absolute;
    top: 500px;
    left: 220px;
    background-color: var(--color-light);
    color: var(--color-dark);

}

#ancestro{
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
    border: solid var(--color-light) 1px;
}

    /* Nos permite mantener el elemento de manera fija en el viewport.*/

/* #Fixed{
    left: 350px;
    top: 500px;
    position: fixed;
    background-color: cadetblue;
}*/

#chat{
    
    top: 520px;
    left: 370px;
    width: 60px;
    height: 60px;
    position: fixed;
}

#WhatsappIcon{
    width: 100%;
    
}

#display-1{
    display: inline;
    
}

#display-2{
    display: inline;

}

.display-inline{

    width: 100px;
    height: 100px;
    background-color: var(--color-text-primary);
    color: var(--color-dark);
    text-align: center;
    margin: 2px;

}

.display-block{
    display: inline-block;
    width: 100px;
    height: 100px;
    background-color: var(--color-secondary);
    text-align: center;
    margin: 2px;

}

    @media (max-width:720px)
    {
        .display-none{
            display:none;
        }
    }

    /* Display flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro. El flexbox se aplica en el container y tiene efecto sobre los hijos.
    Por default, la dirección de flex es en filas (row).
    Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos.
    > - flex-direction: column, column-reverse, row, row-reverse
    > - flex-wrap: wrap, nowrap, wrap-reverse
    > - justify-content: center, flex-start, flex-end, space between, space-around
    > - align-item: start, end, center
    > - align-self: flex-start, flex-end
*/
    .container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        align-items: center;


        width: auto;
        height: 350px;
        margin: 10px;
        padding: 15px;
        border-radius: 10px;
        background-color: var(--color-text-secondary);
    
    }

    .display-flex {
        width: 100px;
        height: 80px;
        margin: 5px;
        padding: 2px;
        text-align: center;
        justify-content: center;
        align-items: center;
        background-color: var(--color-background);
        border-radius: 6px;
    }

    a{
        text-decoration: none;
        color: var(--color-light);
    }

    #item-6{
        align-self: center;
    }

    .grid{
        display: grid;
        grid-template-columns: 1fr;
        /*grid-template-rows: 1fr;*/
        gap: 20px;
        padding: 10px;
    }

    .display-grid{
        background-color: var(--color-text-secondary);
        border-radius: 3px;
        padding: 20px;
        text-align: center;
        border: solid var(--color-text-primary) 1px;
    }

    .container-1{
        
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: 1fr 2fr 2fr 1fr;
        grid-template-areas: 
        "header header header"
        "nav nav nav"
        "aside section section"
        "aside article article"
        "footer footer footer";

        width: auto;
        height: 500px;
        border: solid var(--color-text-primary) 0.7px;
        text-align: center;
        margin: 10px;
        border-radius: 5px;
        font-size: 18px;

    }

    header{
        background-color: darkviolet;
        grid-area: header;
    }
    nav{
        background-color: darkgreen;
        grid-area: nav;
    }
    
    section{
        background-color: peru;
        grid-area: section;
    }

    aside{
        background-color: seagreen;
        grid-area: aside;

    }

    article{
        background-color: tomato;
        grid-area: article;
    }

    footer{
        background-color: deepskyblue;
        grid-area: footer;
    }

    @media (max-width: 720px){
        .display-none{
            display:none;
        }
    
        .container-1{
            grid-template-columns: 1fr;
            grid-template-rows: repeat(6,1fr);
            grid-template-areas: 
            "header"
            "nav"
            "aside"
            "section"
            "article"
            "footer";
        }
    
    }
